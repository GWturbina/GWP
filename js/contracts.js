/* jshint esversion: 8 */
/* global CONFIG, web3Manager, ethers */

/**
 * GlobalWay Contracts Manager
 * –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–û –ù–ê –û–°–ù–û–í–ï –†–ï–ê–õ–¨–ù–´–• ABI
 * –í–µ—Ä—Å–∏—è: 3.0
 * –î–∞—Ç–∞: 01.11.2025
 */

class ContractsManager {
  constructor() {
    this.contracts = {};
    this.initialized = false;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö 10 –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
   */
  async init() {
    if (!web3Manager.connected) {
      throw new Error('Wallet not connected');
    }

    console.log('üìÑ Initializing contracts...');

    try {
      // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ ABI
      const response = await fetch('./contracts/contracts-full-compact.json');
      if (!response.ok) {
        throw new Error('Failed to load contracts');
      }
      
      const data = await response.json();
      const abis = data.contracts || data;

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GWTToken
      this.contracts.gwtToken = new ethers.Contract(
        CONFIG.CONTRACTS.GWTToken,
        abis.GWTToken?.abi || abis.GWTToken,
        web3Manager.signer
      );

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GlobalWay (MAIN)
      this.contracts.globalWay = new ethers.Contract(
        CONFIG.CONTRACTS.GlobalWay,
        abis.GlobalWay?.abi || abis.GlobalWay,
        web3Manager.signer
      );

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Marketing
      this.contracts.marketing = new ethers.Contract(
        CONFIG.CONTRACTS.Marketing,
        abis.GlobalWayMarketing?.abi || abis.Marketing,
        web3Manager.signer
      );

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LeaderPool
      this.contracts.leaderPool = new ethers.Contract(
        CONFIG.CONTRACTS.LeaderPool,
        abis.GlobalWayLeaderPool?.abi || abis.LeaderPool,
        web3Manager.signer
      );

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Investment
      this.contracts.investment = new ethers.Contract(
        CONFIG.CONTRACTS.Investment,
        abis.GlobalWayInvestment?.abi || abis.Investment,
        web3Manager.signer
      );

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Quarterly
      this.contracts.quarterly = new ethers.Contract(
        CONFIG.CONTRACTS.Quarterly,
        abis.GlobalWayQuarterly?.abi || abis.Quarterly,
        web3Manager.signer
      );

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TechAccounts
      this.contracts.techAccounts = new ethers.Contract(
        CONFIG.CONTRACTS.TechAccounts,
        abis.GlobalWayTechAccounts?.abi || abis.TechAccounts,
        web3Manager.signer
      );

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bridge
      this.contracts.bridge = new ethers.Contract(
        CONFIG.CONTRACTS.Bridge,
        abis.GlobalWayBridge?.abi || abis.Bridge,
        web3Manager.signer
      );

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stats
      this.contracts.stats = new ethers.Contract(
        CONFIG.CONTRACTS.Stats,
        abis.GlobalWayStats?.abi || abis.Stats,
        web3Manager.signer
      );

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Governance
      this.contracts.governance = new ethers.Contract(
        CONFIG.CONTRACTS.Governance,
        abis.GlobalWayGovernance?.abi || abis.Governance,
        web3Manager.signer
      );

      this.initialized = true;
      console.log('‚úÖ All 10 contracts initialized');

    } catch (error) {
      console.error('‚ùå Contracts initialization failed:', error);
      throw error;
    }
  }

  // ==========================================
  // GLOBALWAY - –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
  // ==========================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   * ABI: users(address) view returns (UserInfo)
   */
  async getUserInfo(address) {
    try {
      const user = await this.contracts.globalWay.users(address);
      
      return {
        id: user.id || '',
        sponsorId: user.sponsorId || '',
        refAddress: user.refAddress || ethers.constants.AddressZero,
        registrationTime: user.registrationTime ? user.registrationTime.toNumber() : 0,
        rankLevel: Number(user.rankLevel) || 0,
        activeLevel: Number(user.activeLevel) || 0,
        partnersCount: Number(user.partnersCount) || 0,
        isActive: Boolean(user.isActive),
        isBlocked: Boolean(user.isBlocked),
        isCharity: Boolean(user.isCharity),
        isTechnical: Boolean(user.isTechnical)
      };
    } catch (error) {
      console.error('getUserInfo error:', error);
      return {
        id: '',
        sponsorId: '',
        refAddress: ethers.constants.AddressZero,
        registrationTime: 0,
        rankLevel: 0,
        activeLevel: 0,
        partnersCount: 0,
        isActive: false,
        isBlocked: false,
        isCharity: false,
        isTechnical: false
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async isUserRegistered(address) {
    try {
      const userInfo = await this.getUserInfo(address);
      return userInfo.id !== '' && userInfo.registrationTime > 0;
    } catch (error) {
      console.error('isUserRegistered error:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω—è
   * ABI: isLevelActive(address user, uint8 level) view returns (bool)
   */
  async isLevelActive(address, level) {
    try {
      return await this.contracts.globalWay.isLevelActive(address, level);
    } catch (error) {
      console.error('isLevelActive error:', error);
      return false;
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * ABI: register(address referrer) payable
   */
  async register(refAddress) {
    try {
      const price = ethers.utils.parseEther(CONFIG.LEVEL_PRICES[0]);
      
      console.log('üìù Registering user with referrer:', refAddress);
      console.log('üí∞ Payment:', CONFIG.LEVEL_PRICES[0], 'BNB');
      
      const tx = await this.contracts.globalWay.register(refAddress, {
        value: price,
        gasLimit: CONFIG.GAS_LIMITS.register || 500000
      });
      
      console.log('üì§ Transaction sent:', tx.hash);
      const receipt = await tx.wait();
      console.log('‚úÖ Registration successful');
      
      return receipt;
    } catch (error) {
      console.error('‚ùå Registration failed:', error);
      throw error;
    }
  }

  /**
   * –ê–∫—Ç–∏–≤–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è (–ø–æ–∫—É–ø–∫–∞)
   * ABI: activateLevel(uint8 level) payable
   */
  async buyLevel(level) {
    try {
      const price = ethers.utils.parseEther(CONFIG.LEVEL_PRICES[level - 1]);
      
      console.log(`üí∞ Buying Level ${level} for ${CONFIG.LEVEL_PRICES[level - 1]} BNB`);
      
      const tx = await this.contracts.globalWay.activateLevel(level, {
        value: price,
        gasLimit: CONFIG.GAS_LIMITS.buyLevel || 600000
      });
      
      console.log('üì§ Transaction sent:', tx.hash);
      const receipt = await tx.wait();
      console.log('‚úÖ Level activated');
      
      return receipt;
    } catch (error) {
      console.error('‚ùå buyLevel failed:', error);
      throw error;
    }
  }

  /**
   * –ü–∞–∫–µ—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π
   * ABI: activateBulkLevels(uint8 maxLevel) payable
   */
  async buyBulkLevels(upToLevel) {
    try {
      // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
      let totalCost = 0;
      for (let i = 0; i < upToLevel; i++) {
        totalCost += parseFloat(CONFIG.LEVEL_PRICES[i]);
      }
      
      const price = ethers.utils.parseEther(totalCost.toFixed(4));
      
      console.log(`üí∞ Buying Levels 1-${upToLevel} for ${totalCost.toFixed(4)} BNB`);
      
      const tx = await this.contracts.globalWay.activateBulkLevels(upToLevel, {
        value: price,
        gasLimit: CONFIG.GAS_LIMITS.buyBulkLevels || 1000000
      });
      
      console.log('üì§ Transaction sent:', tx.hash);
      const receipt = await tx.wait();
      console.log('‚úÖ Bulk levels activated');
      
      return receipt;
    } catch (error) {
      console.error('‚ùå buyBulkLevels failed:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ User ID
   * ABI: idToAddress(string userId) view returns (address)
   */
  async getAddressByUserId(userId) {
    try {
      return await this.contracts.globalWay.idToAddress(userId);
    } catch (error) {
      console.error('getAddressByUserId error:', error);
      return ethers.constants.AddressZero;
    }
  }

  // ==========================================
  // MARKETING - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∏ –º–∞—Ç—Ä–∏—á–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã
  // ==========================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * ABI: getUserBalances(address user) view returns (uint256 referral, uint256 matrix, uint256 total)
   */
  async getUserBalances(address) {
    try {
      const balances = await this.contracts.marketing.getUserBalances(address);
      
      return {
        referralBalance: balances.referralBalance || balances[0],
        matrixBalance: balances.matrixBalance || balances[1],
        totalBalance: balances.totalBalance || balances[2]
      };
    } catch (error) {
      console.error('getUserBalances error:', error);
      return {
        referralBalance: ethers.BigNumber.from(0),
        matrixBalance: ethers.BigNumber.from(0),
        totalBalance: ethers.BigNumber.from(0)
      };
    }
  }

  /**
   * –í—ã–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
   * ABI: withdrawReferral()
   */
  async withdrawReferral() {
    try {
      const tx = await this.contracts.marketing.withdrawReferral({
        gasLimit: CONFIG.GAS_LIMITS.withdraw || 300000
      });
      
      const receipt = await tx.wait();
      console.log('‚úÖ Referral withdrawal successful');
      return receipt;
    } catch (error) {
      console.error('withdrawReferral error:', error);
      throw error;
    }
  }

  /**
   * –í—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
   * ABI: withdrawMatrix()
   */
  async withdrawMatrix() {
    try {
      const tx = await this.contracts.marketing.withdrawMatrix({
        gasLimit: CONFIG.GAS_LIMITS.withdraw || 300000
      });
      
      const receipt = await tx.wait();
      console.log('‚úÖ Matrix withdrawal successful');
      return receipt;
    } catch (error) {
      console.error('withdrawMatrix error:', error);
      throw error;
    }
  }

  /**
   * –í—ã–≤–æ–¥ –í–°–ï–• —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ Marketing (referral + matrix)
   */
  async withdrawMarketing() {
    try {
      // –í—ã–∑—ã–≤–∞–µ–º –æ–±–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
      await this.withdrawReferral();
      await this.withdrawMatrix();
      
      console.log('‚úÖ Marketing withdrawal complete');
      return { success: true };
    } catch (error) {
      console.error('withdrawMarketing error:', error);
      throw error;
    }
  }

  // ==========================================
  // LEADERPOOL - –õ–∏–¥–µ—Ä—Å–∫–∏–µ –±–æ–Ω—É—Å—ã
  // ==========================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–Ω–≥–µ
   * ABI: getUserRankInfo(address user) view returns (RankInfo)
   */
  async getUserRankInfo(address) {
    try {
      const rankInfo = await this.contracts.leaderPool.getUserRankInfo(address);
      
      return {
        currentRank: Number(rankInfo.currentRank) || 0,
        rankBalance: rankInfo.rankBalance || ethers.BigNumber.from(0),
        totalEarned: rankInfo.totalEarned || ethers.BigNumber.from(0),
        qualifiedPartners: Number(rankInfo.qualifiedPartners) || 0,
        teamVolume: rankInfo.teamVolume || ethers.BigNumber.from(0)
      };
    } catch (error) {
      console.error('getUserRankInfo error:', error);
      return {
        currentRank: 0,
        rankBalance: ethers.BigNumber.from(0),
        totalEarned: ethers.BigNumber.from(0),
        qualifiedPartners: 0,
        teamVolume: ethers.BigNumber.from(0)
      };
    }
  }

  /**
   * –í—ã–≤–æ–¥ –ª–∏–¥–µ—Ä—Å–∫–∏—Ö –±–æ–Ω—É—Å–æ–≤
   * ABI: claimRankBonus()
   */
  async withdrawLeaderPool() {
    try {
      const tx = await this.contracts.leaderPool.claimRankBonus({
        gasLimit: CONFIG.GAS_LIMITS.withdraw || 300000
      });
      
      const receipt = await tx.wait();
      console.log('‚úÖ Leader Pool withdrawal successful');
      return receipt;
    } catch (error) {
      console.error('withdrawLeaderPool error:', error);
      throw error;
    }
  }

  // ==========================================
  // INVESTMENT - –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—É–ª
  // ==========================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–µ—Å—Ç–æ—Ä–µ
   * ABI: getInvestorInfo(address user) view returns (InvestorInfo)
   */
  async getInvestorInfo(address) {
    try {
      const info = await this.contracts.investment.getInvestorInfo(address);
      
      return {
        totalInvested: info.totalInvested || ethers.BigNumber.from(0),
        pendingRewards: info.pendingRewards || ethers.BigNumber.from(0),
        claimedRewards: info.claimedRewards || ethers.BigNumber.from(0),
        lastClaimTime: info.lastClaimTime ? info.lastClaimTime.toNumber() : 0
      };
    } catch (error) {
      console.error('getInvestorInfo error:', error);
      return {
        totalInvested: ethers.BigNumber.from(0),
        pendingRewards: ethers.BigNumber.from(0),
        claimedRewards: ethers.BigNumber.from(0),
        lastClaimTime: 0
      };
    }
  }

  /**
   * –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: claimWeeklyReward() –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ –≤ ABI
   * –ò—Å–ø–æ–ª—å–∑—É–µ–º pendingRewards –∏–∑ getInvestorInfo
   * –†–µ–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ - —ç—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º —á–µ—Ä–µ–∑ distributeWeeklyRewards()
   */
  async withdrawInvestment() {
    try {
      console.warn('‚ö†Ô∏è  Investment withdrawal is automatic via admin distributeWeeklyRewards()');
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const info = await this.getInvestorInfo(web3Manager.address);
      return info;
    } catch (error) {
      console.error('withdrawInvestment error:', error);
      throw error;
    }
  }

  // ==========================================
  // QUARTERLY - –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  // ==========================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * ABI: getUserQuarterlyInfo(address user) view returns (QuarterlyInfo)
   */
  async getQuarterlyInfo(address) {
    try {
      const info = await this.contracts.quarterly.getUserQuarterlyInfo(address);
      
      return {
        lastPaymentTime: info.lastPaymentTime ? info.lastPaymentTime.toNumber() : 0,
        nextPaymentDue: info.nextPaymentDue ? info.nextPaymentDue.toNumber() : 0,
        currentQuarter: Number(info.currentQuarter) || 0,
        isPaid: Boolean(info.isPaid),
        totalPaid: Number(info.totalPaid) || 0,
        charityAccount: info.charityAccount || ethers.constants.AddressZero,
        techAccount1: info.techAccount1 || ethers.constants.AddressZero,
        techAccount2: info.techAccount2 || ethers.constants.AddressZero
      };
    } catch (error) {
      console.error('getQuarterlyInfo error:', error);
      return {
        lastPaymentTime: 0,
        nextPaymentDue: 0,
        currentQuarter: 0,
        isPaid: false,
        totalPaid: 0,
        charityAccount: ethers.constants.AddressZero,
        techAccount1: ethers.constants.AddressZero,
        techAccount2: ethers.constants.AddressZero
      };
    }
  }

  /**
   * –û–ø–ª–∞—Ç–∞ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * ABI: payQuarterlyActivity() payable
   */
  async payQuarterly() {
    try {
      const fee = ethers.utils.parseEther('0.075');
      
      console.log('üí∞ Paying quarterly activity: 0.075 BNB');
      
      const tx = await this.contracts.quarterly.payQuarterlyActivity({
        value: fee,
        gasLimit: CONFIG.GAS_LIMITS.payQuarterly || 500000
      });
      
      console.log('üì§ Transaction sent:', tx.hash);
      const receipt = await tx.wait();
      console.log('‚úÖ Quarterly payment successful');
      
      return receipt;
    } catch (error) {
      console.error('‚ùå payQuarterly failed:', error);
      throw error;
    }
  }

  // ==========================================
  // GWTTOKEN - –¢–æ–∫–µ–Ω
  // ==========================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
   * ABI: balanceOf(address account) view returns (uint256)
   */
  async getTokenBalance(address) {
    try {
      return await this.contracts.gwtToken.balanceOf(address);
    } catch (error) {
      console.error('getTokenBalance error:', error);
      return ethers.BigNumber.from(0);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
   * ABI: currentPrice() view returns (uint256)
   */
  async getTokenPrice() {
    try {
      return await this.contracts.gwtToken.currentPrice();
    } catch (error) {
      console.error('getTokenPrice error:', error);
      return ethers.BigNumber.from(0);
    }
  }

  /**
   * –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
   * ABI: buyTokens(uint256 amount) payable
   */
  async buyTokens(amount) {
    try {
      const price = await this.getTokenPrice();
      const cost = price.mul(amount);
      
      const tx = await this.contracts.gwtToken.buyTokens(amount, {
        value: cost,
        gasLimit: CONFIG.GAS_LIMITS.buyTokens || 400000
      });
      
      const receipt = await tx.wait();
      console.log('‚úÖ Tokens purchased');
      return receipt;
    } catch (error) {
      console.error('buyTokens error:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã
   * ABI: sellTokens(uint256 amount)
   */
  async sellTokens(amount) {
    try {
      const tx = await this.contracts.gwtToken.sellTokens(amount, {
        gasLimit: CONFIG.GAS_LIMITS.sellTokens || 400000
      });
      
      const receipt = await tx.wait();
      console.log('‚úÖ Tokens sold');
      return receipt;
    } catch (error) {
      console.error('sellTokens error:', error);
      throw error;
    }
  }

  // ==========================================
  // STATS - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  // ==========================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * ABI: getUserFullStats(address user) view returns (UserFullStats)
   */
  async getUserFullStats(address) {
    try {
      return await this.contracts.stats.getUserFullStats(address);
    } catch (error) {
      console.error('getUserFullStats error:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–∞–Ω–¥—ã
   * ABI: getUserStructureStats(address user) view returns (StructureStats)
   */
  async getUserStructureStats(address) {
    try {
      return await this.contracts.stats.getUserStructureStats(address);
    } catch (error) {
      console.error('getUserStructureStats error:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   * ABI: getGlobalStats() view returns (GlobalStats)
   */
  async getGlobalStats() {
    try {
      return await this.contracts.stats.getGlobalStats();
    } catch (error) {
      console.error('getGlobalStats error:', error);
      return null;
    }
  }

  // ==========================================
  // BRIDGE - –ü—Ä–æ–µ–∫—Ç—ã
  // ==========================================

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
   * ABI: checkUserAccess(address user, string projectId) view returns (bool)
   */
  async checkUserAccess(projectId) {
    try {
      return await this.contracts.bridge.checkUserAccess(web3Manager.address, projectId);
    } catch (error) {
      console.error('checkUserAccess error:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
   * ABI: getUserAccessStatus(address user, string projectId) view returns (AccessStatus)
   */
  async getUserAccessStatus(projectId) {
    try {
      return await this.contracts.bridge.getUserAccessStatus(web3Manager.address, projectId);
    } catch (error) {
      console.error('getUserAccessStatus error:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
   * ABI: getAllProjects() view returns (Project[])
   */
  async getAllProjects() {
    try {
      return await this.contracts.bridge.getAllProjects();
    } catch (error) {
      console.error('getAllProjects error:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ ID
   * ABI: getProject(string projectId) view returns (Project)
   */
  async getProject(projectId) {
    try {
      return await this.contracts.bridge.getProject(projectId);
    } catch (error) {
      console.error('getProject error:', error);
      return null;
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const contracts = new ContractsManager();
